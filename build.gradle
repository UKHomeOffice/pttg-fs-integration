buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://github.com/UKHomeOffice/pttg-gradle-repo/raw/master/releases" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'pttg-gradle-common:pttgCommonGradle:1.5.RELEASE'

        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0"
    }
}

apply plugin: 'scala'
apply plugin: 'pttgCommonGradle'
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.artifactory"

group 'com.hod'
version '0.1.01'

mainClassName = "na"

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

artifactory {
    contextUrl = 'https://artifactory.digital.homeoffice.gov.uk/artifactory'
    publish {
        repository { // PUBLISH access used by Jenkins - do not publish to artifactory for local working, only to maven local
            repoKey = 'libs-release-local'
            username = System.env.ARTIFACTORY_USER
            password = System.env.ARTIFACTORY_PASS
            maven = true
        }
        defaults {
            publications ('mavenJava')
        }
    }

    println "ARTIFACTORY_USER=" + System.env.ARTIFACTORY_USER
}


dependencies {

    compile libraries.groovy
    compile libraries.logging
    compile libraries.jackson
    compile libraries.jersey
    compile libraries.json

    compile 'com.fasterxml.jackson.module:jackson-module-scala_2.11:2.7.4'
    compile 'org.apache.httpcomponents:httpclient:4.5.2'
    compile 'org.scala-lang:scala-library:2.11.8'

    compile 'org.springframework.retry:spring-retry:1.1.3.RELEASE'

    testCompile libraries.groovy
    testCompile libraries.jackson
    testCompile libraries.jersey
    testCompile libraries.json
    testCompile libraries.spock
    testCompile libraries.springTest
    testCompile libraries.testUtils

    testCompile 'org.scala-lang:scala-library:2.11.8'
}


compileGroovy.dependsOn "compileScala"
compileTestGroovy.dependsOn "compileTestScala"


tasks.withType(JavaCompile) {
    options.fork = true  // Fork your compilation into a child process
    options.forkOptions.setMemoryMaximumSize("256m")
}

tasks.withType(GroovyCompile) {
    options.fork = true  // Fork your compilation into a child process
    options.forkOptions.setMemoryMaximumSize("256m")
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.with {
        force = true
        additionalParameters = ["-Xmax-classfile-name", "127"]
        forkOptions.setMemoryMaximumSize("256m")
    }
}

test {
    maxHeapSize = "256m"
}

tasks.withType(Jar) {
    manifest {
        attributes(
                'Implementation-Title': "${jar.baseName}",
                'Implementation-Version': version
        )
    }
}


